
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

enum EventStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  PAID
  DELIVERED
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
}

model Event {
  id          String      @id @default(uuid())
  name        String
  description String?
  type        String // e.g., 'Wedding', 'Birthday', 'Corporate'
  status      EventStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  bookings    Booking[]
}

model User {
  id             String    @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  bookings       Booking[]
  provider       Provider? // Optional, as not all users will be providers
  reportedIssues Issue[]   @relation(name: "ReportedIssues")
  assignedIssues Issue[]   @relation(name: "AssignedIssues")

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Provider {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  name         String
  description  String?
  contactEmail String?
  phoneNumber  String?
  address      String?
  website      String?
  services     String[] // Array of strings, e.g., ["Wedding Planning", "Catering"]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Booking {
  id              String         @id @default(uuid())
  eventId         String
  event           Event          @relation(fields: [eventId], references: [id])
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  providerId      String
  startTime       DateTime
  endTime         DateTime
  status          BookingStatus  @default(PENDING)
  paymentIntentId String?        @unique
  paymentStatus   PaymentStatus? @default(UNPAID)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Issue {
  id               String   @id @default(uuid())
  title            String
  description      String?
  status           String   @default("open") // 'open', 'in_progress', 'resolved', 'closed'
  priority         String   @default("medium") // 'low', 'medium', 'high', 'critical'
  reportedByUserId String?
  reportedByUser   User?    @relation(name: "ReportedIssues", fields: [reportedByUserId], references: [id])
  assignedToUserId String?
  assignedToUser   User?    @relation(name: "AssignedIssues", fields: [assignedToUserId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
